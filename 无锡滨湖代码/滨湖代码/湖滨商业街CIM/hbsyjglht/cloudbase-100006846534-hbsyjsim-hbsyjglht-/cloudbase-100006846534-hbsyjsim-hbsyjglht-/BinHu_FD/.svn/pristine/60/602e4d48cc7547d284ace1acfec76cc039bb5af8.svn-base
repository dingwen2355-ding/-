<template>
  <j-modal
    :title="title"
    :width="800"
    :visible="visible"
    :confirmLoading="confirmLoading"
    switchFullscreen
    @ok="handleOk"
    @cancel="handleCancel"
    cancelText="关闭">
    
    <a-spin :spinning="confirmLoading">
      <a-form-model ref="form" :model="model" :rules="validatorRules">
        <a-form-model-item
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          label="标题" prop="title">
          <a-input v-model="model.title" placeholder="请输入标题"  />
        </a-form-model-item>
        <a-form-model-item
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          label="正文" prop="content">
          <j-editor v-model="model.content" ></j-editor>
         <!--  <a-input placeholder="请输入正文" v-decorator="['content', {}]" /> -->
        </a-form-model-item>
        <a-form-model-item
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          label="接收端" prop="type">
         <j-dict-select-tag v-model="model.type" dictCode="message_type"/>
        </a-form-model-item>
		
      </a-form-model>
    </a-spin>
  </j-modal>
</template>

<script>
  import { httpAction } from '@/api/manage'
  import pick from 'lodash.pick'
  import moment from "moment"
import JEditor from '../../../components/jeecg/JEditor.vue'

  export default {
  components: { JEditor },
    name: "MessageModal",
    data () {
      return {
        title:"操作",
        visible: false,
        model: {},
        labelCol: {
          xs: { span: 24 },
          sm: { span: 5 },
        },
        wrapperCol: {
          xs: { span: 24 },
          sm: { span: 16 },
        },

        confirmLoading: false,
        validatorRules:{
        title:[{ required: true, message: '请输入标题!' }],
        content:[{ required: true, message: '请填写正文!' }],
        type:[{ required: true, message: '请选择接收端!' }],
        },
        url: {
          add: "/message/message/add",
          edit: "/message/message/edit",
        },
      }
    },
    created () {
    },
    methods: {
      add () {
        this.edit({});
      },
      edit (record) {
       // this.form.resetFields();
        this.model = Object.assign({}, record);
        this.visible = true;
       /*  this.$nextTick(() => {
          this.form.setFieldsValue(pick(this.model,'title','content','type'))
		  //时间格式化
        });
 */
      },
      close () {
        this.$emit('close');
        this.visible = false;
        Object.assign(this.$data,this.$options.data())
      },
      handleOk () {
        const that = this;
        // 触发表单验证

        this.$refs.form.validate((valid) => {
          if (valid) {
            that.confirmLoading = true;
            let httpurl = '';
            let method = '';
            if(!this.model.id){
              httpurl+=this.url.add;
              method = 'post';
            }else{
              httpurl+=this.url.edit;
               method = 'put';
            }
            let formData = Object.assign({},this.model);
            //时间格式化
            
            console.log(formData)
            httpAction(httpurl,formData,method).then((res)=>{
              if(res.success){
                that.$message.success(res.message);
                that.$emit('ok');
              }else{
                that.$message.warning(res.message);
              }
            }).finally(() => {
              that.confirmLoading = false;
              that.close();
            })



          }
        })
      },
      handleCancel () {
        this.close()
      },


    }
  }
</script>

<style lang="less" scoped>

</style>